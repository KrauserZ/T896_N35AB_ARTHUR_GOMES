from ultralytics import YOLO
import cv2
import numpy as np
import matplotlib.pyplot as plt

imagem_original = cv2.imread("AV3simples3.jpg")

sem_ruido = cv2.bilateralFilter(img, d=9, sigmaColor=75, sigmaSpace=75)
 
cinza = cv2.cvtColor(sem_ruido, cv2.COLOR_BGR2GRAY)
 
kernel = np.ones((3, 3), np.uint8)
    
abertura = cv2.morphologyEx(cinza, cv2.MORPH_OPEN, kernel) 
    
fechamento = cv2.morphologyEx(abertura, cv2.MORPH_CLOSE, kernel)  

laplaciano = cv2.Laplacian(fechamento, cv2.CV_64F)
    
bordas_realcadas = cv2.convertScaleAbs(laplaciano)

bordas_coloridas = cv2.cvtColor(bordas_realcadas, cv2.COLOR_GRAY2BGR)

alpha = 0.7 

return cv2.addWeighted(sem_ruido, 1, bordas_coloridas, alpha, 0)


modelo = YOLO("yolo11m.pt")

modelo.train(data="HomeObjects-3K.yaml", epochs=100, imgsz=640)


caminho_imagem = "AV3simples3.jpg"

imagem_original = cv2.imread(caminho_imagem)

imagem_processada = pre_processar_imagem(imagem_original.copy())


resultados = modelo.predict(source=imagem_processada, conf=0.2, verbose=False)

classes_alvo = ['door', 'window']

imagem_com_detecao = imagem_original.copy()

camada_sobreposicao = imagem_com_detecao.copy()

alpha_preenchimento = 1

for r in resultados:
    for caixa in r.boxes:
        id_classe = int(caixa.cls[0])
        rotulo = modelo.names[id_classe]

        if rotulo in classes_alvo:
            x1, y1, x2, y2 = map(int, caixa.xyxy[0])

            cv2.rectangle(camada_sobreposicao, (x1, y1), (x2, y2), (0, 255, 0), -1)

            cv2.rectangle(imagem_com_detecao, (x1, y1), (x2, y2), (0, 255, 0), 2)

            cv2.putText(imagem_com_detecao, rotulo, (x1, y1 - 10),

            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)


imagem_resultado = cv2.addWeighted(camada_sobreposicao, alpha_preenchimento, imagem_com_detecao, 1 - alpha_preenchimento, 0)

plt.figure(figsize=(15, 10))

plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(imagem_original, cv2.COLOR_BGR2RGB))
plt.title("Imagem Original")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(imagem_resultado, cv2.COLOR_BGR2RGB))
plt.title("Detecções com Preenchimento")
plt.axis('off')

plt.tight_layout()
plt.show()
