from ultralytics import YOLO
from google.colab.patches import cv2_imshow
import cv2
import matplotlib.pyplot as plt
# Carrega o modelo YOLOv8
model = YOLO("yolov8n.pt")
# Carrega a imagem
image = cv2.imread("essa imagem.jpg")
image_copy = image.copy()
# Realiza a detecção
results = model(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

results[0].plot()

# Obtém as informações das bounding boxes
boxes_objects = results[0].boxes  # Obtém o objeto Boxes
xyxy = boxes_objects.xyxy.cpu().numpy().astype(int)
confidences = boxes_objects.conf.cpu().numpy()
class_ids = boxes_objects.cls.cpu().numpy().astype(int)
names = results[0].names

# Define a cor da bounding box para a classe "dog"
dog_color = (100, 150, 200) # Rosa (exemplo)
thickness = 2
class_to_plot = "dog"

# Itera sobre as detecções e desenha as bounding boxes apenas para a classe "dog"
for i in range(len(xyxy)):
    x1, y1, x2, y2 = xyxy[i]
    confidence = confidences[i]
    class_id = class_ids[i]
    class_name = names[class_id]

    if class_name == class_to_plot:
        label = f"{class_name}: {confidence:.2f}"
        cv2.rectangle(image_copy, (x1, y1), (x2, y2), dog_color, thickness)

        # Adiciona o texto da label acima da bounding box
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.6
        font_thickness = 2
        text_size = cv2.getTextSize(label, font, font_scale, font_thickness)[0]
        text_x = x1
        text_y = y1 - 10 if y1 - 10 > 10 else y2 + text_size[1] + 10
        cv2.putText(image_copy, label, (text_x, text_y), font, font_scale, dog_color, font_thickness, cv2.LINE_AA)

# Exibe a imagem com as bounding boxes da classe "dog"
cv2_imshow(image_copy)
cv2.waitKey(0)
cv2.destroyAllWindows()
